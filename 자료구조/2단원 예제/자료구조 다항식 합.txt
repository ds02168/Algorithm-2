#include <stdio.h>
#define FALSE 0
#define TRUE 1

#define MAX_TERMS 100

typedef struct {
	float coef;
	int expon;
}polynomial;

polynomial terms[MAX_TERMS];

void padd(int, int, int, int, int *, int *);
void attach(float, int);
int COMPARE(int, int);

int avail;
void main(void)
{
	terms[0].coef = 3;
	terms[0].expon = 14;
	terms[1].coef = 2;
	terms[1].expon = 8;
	terms[2].coef = 1;
	terms[2].expon = 0;
	terms[3].coef = 8;
	terms[3].expon = 14;
	terms[4].coef = -3;
	terms[4].expon = 10;
	terms[5].coef = 10;
	terms[5].expon = 6;

	int starta = 0, finisha = 2, startb = 3, finishb = 5;
	avail = 6;
	int h=0, g=0;
	int *startd;
	startd = &g;
	int *finishd;
	finishd = &h;

	padd(starta, finisha, startb, finishb, startd, finishd);

	for (int i = *startd; i <= *finishd; i++)
		printf("%.2fx^%d ", terms[i].coef, terms[i].expon);
}

void padd(int starta, int finisha, int startb, int finishb, int *startd, int *finishd)
{
	float coefficient;
	*startd = avail;
	while(starta<=finisha&&startb<=finishb)
		switch (COMPARE(terms[starta].expon, terms[startb].expon))
		{
		case -1:
			attach(terms[startb].coef, terms[startb].expon);
			startb++; break;
		case 0:
			coefficient = terms[starta].coef + terms[startb].coef;
			if (coefficient)
				attach(coefficient, terms[starta].expon);
			starta++; startb++;
			break;
		case 1:
			attach(terms[starta].coef, terms[starta].expon);
			starta++;
			break;
		}

	for (; starta <= finisha; starta++)
		attach(terms[starta].coef, terms[starta].expon);

	for (; startb <= finishb; startb++)
		attach(terms[startb].coef, terms[startb].expon);

	*finishd = avail - 1;
}


void attach(float coefficient, int exponent)
{
	if (avail >= MAX_TERMS) {
		fprintf(stderr, "Too many\n");
		exit(1);
	}
	terms[avail].coef = coefficient;
	terms[avail++].expon = exponent;
}


int COMPARE(int a, int b)
{
	if (a < b)
		return -1;
	else if (a == b)
		return 0;
	else
		return 1;
}
