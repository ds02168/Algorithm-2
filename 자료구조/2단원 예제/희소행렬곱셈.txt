#include <stdio.h>

#define MAX_TERMS 101
#define MAX_COL 50

typedef struct {
	int row;
	int col;
	int value;
}term;

term a[MAX_TERMS];
term b[MAX_TERMS];
term d[MAX_TERMS];


void fast_transpose(term[], term[]);
void mmult(term[], term[], term[]);
void storesum(term[], int*, int, int, int *);
int COMPARE(int, int);
void main(void)
{
	a[0].row = 6;
	a[0].col = 6;
	a[0].value = 8;
	a[1].row = 0;
	a[1].col = 0;
	a[1].value = 15;
	a[2].row = 0;
	a[2].col = 3;
	a[2].value = 22;
	a[3].row = 0;
	a[3].col = 5;
	a[3].value = -15;
	a[4].row = 1;
	a[4].col = 1;
	a[4].value = 11;
	a[5].row = 1;
	a[5].col = 2;
	a[5].value = 3;
	a[6].row = 2;
	a[6].col = 3;
	a[6].value = -6;
	a[7].row = 4;
	a[7].col = 0;
	a[7].value = 91;
	a[8].row = 5;
	a[8].col = 2;
	a[8].value = 28;
	b[0].row = 6;
	b[0].col = 2;
	b[0].value = 5;
	b[1].row = 0;
	b[1].col = 0;
	b[1].value = 1;
	b[2].row = 1;
	b[2].col = 1;
	b[2].value = 1;
	b[3].row = 2;
	b[3].col = 0;
	b[3].value = 3;
	b[4].row = 3;
	b[4].col = 1;
	b[4].value = 1;
	b[5].row = 4;
	b[5].col = 0;
	b[5].value = 2;


	mmult(a, b, d);
	
	for (int i = 0; i <= a[0].value; i++)
	{
		printf("%d %d %d\n", d[i].row, d[i].col, d[i].value);
	}

}

void mmult(term a[], term b[], term d[])
{
	int i, j, column, totald = 0;
	int totala = a[0].value, totalb = b[0].value;
	int row_begin = 1, row = a[1].row, sum = 0;
	term new_b[MAX_TERMS];

	if (a[0].col != b[0].row) {
		fprintf(stderr, "incorrect matrics\n");
	}
	fast_transpose(b, new_b);

	a[totala + 1].row = a[0].row;
	new_b[totalb + 1].row = b[0].col;


	for (i = 1; i <= totala;) {
		column = new_b[1].row;
		for (j = 1; j <= totalb + 1;) {
			if (a[i].row != row) {
				storesum(d, &totald, row, column, &sum);
				i = row_begin;
				for (; new_b[j].row == column; j++);
				column = new_b[j].row;
			}
			else if (new_b[j].row != column) {
				storesum(d, &totald, row, column, &sum);
				i = row_begin;
				column = new_b[j].row;
			}
			else switch (COMPARE(a[i].col, new_b[j].col)) {
			case -1:
				i++; break;
			case 0:
				sum += (a[i].value*new_b[j].value);
				break;
			case 1:
				j++;
				break;
			}
		}
		for (; a[i].row == row; i++);
		row_begin = i; row = a[i].row;
	}
	d[0].row = a[0].row;
	d[0].col = b[0].col;
	d[0].value = totald;

}

void storesum(term d[], int *totald, int row, int column, int*sum)
{
	if(*sum)
		if (*totald < MAX_TERMS) {
			d[++*totald].row = row;
			d[*totald].col = column;
			d[*totald].value = *sum;
			*sum = 0;
		}
		else {
			fprintf(stderr, "error");
			exit(1);
		}
}

void fast_transpose(term a[], term b[])
{
	int count, i, j, currentb;
	count = a[0].value;
	b[0].row = a[0].col;
	b[0].col = a[0].row;
	b[0].value = count;

	if (count > 0) {
		currentb = 1;
		for (i = 0; i < a[0].col; i++) {
			for (j = 1; j <= count; j++) {
				if (a[j].col == i) {
					b[currentb].col = a[j].row;
					b[currentb].row = a[j].col;
					b[currentb].value = a[j].value;
					currentb++;
				}
			}
		}
	}
}


int COMPARE(int a, int b)
{
	if (a < b)
		return -1;
	else if (a == b)
		return 0;
	else
		return 1;
}