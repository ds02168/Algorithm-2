#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <math.h> //헤더파일 호출

#define MAX_SIZE 100000 //점들의 최대 숫자 = 10만
#define ATURN 0 //A점 입력 플래그
#define BTURN 1 //B점 입력 플래그

struct Point {
	int x;
	int y;
}; //점들의 구조체(x,y)

struct Point* As, *Bs; //가장 짧은 거리 두점을 각각 나타낼 포인터

int SetData(struct Point*, struct Point*); //파일로부터 정보를 받아들이는 함수
int SimpleAlgorithm(struct Point*, struct Point*, int); //1:1비교를 해서 O(n^2)하는 단순 비교 함수
void Print_Algo(int, double); // 결과를 출력하는 함수
int SmartAlgoritm(struct Point*, struct Point*, int); //x좌표 기준으로 A최대->최소, B최소->최대를 점 갯수의 제곱근 만큼만 비교하는 함수
void QuickSort(struct Point*, int, int); //A,B각각 x좌표를 기준으로 오름차순으로 정렬하는 함수


void main(void)
{
	int min;//가장 가까운 두점의 거리를 저장하는 변수
	int size; //데이터의 크기(점들의 갯수)를 저장하는 변수

	clock_t start, stop; //두점을 찾는데 시작,종료 시간을 저장하는 변수
	double duration; //시작 - 끝 사이의 시간차를 저장하는 변수

	struct Point* A = (struct Point*)malloc(sizeof(struct Point) * MAX_SIZE); //구조체 배열 동적 할당
	struct Point* B = (struct Point*)malloc(sizeof(struct Point) * MAX_SIZE); //동적할당 하였으므로 stackOverflow가 일어나지 않음

	printf("컴퓨터공학과 21712184_유태형\n");//컴퓨터공학과 21712184_유태형

	size = SetData(A, B); //파일로부터 데이터를 읽어 차례로 점들을 A,B구조체 배열에 저장

	start = clock(); //시작
	min = SimpleAlgorithm(A, B, size);// 단순 1:1비교를하는 심플알고리즘 함수 호출
	stop = clock(); //끝

	duration = ((double)(stop - start)) / CLOCKS_PER_SEC; //끝난시간-시작시간하여 걸린시간구함

	printf("단순한 방법: ");
	Print_Algo(min, duration);//결과 화면 출력



	start = clock(); //시작
	min = SmartAlgoritm(A, B, size); //정렬후 A는 내림차순, B는 오름차순으로 전체수의 제곱근 만큼만 비교
	stop = clock(); //끝

	duration = ((double)(stop - start)) / CLOCKS_PER_SEC; //끝-시작
	
	printf("똑똑한 방법: ");
	Print_Algo(min, duration); //결과 화면 출력

	free(A);
	free(B); //동적할당 반환
}

int SetData(struct Point* A, struct Point* B) //파일을 읽어 데이터를 배열에 저장하는 함수
{
	char buffer[255];//파일의 이름을 저장
	int buf1, buf2; //buf1=x, buf2=y좌표 저장

	int flag = ATURN; //flag로 데이터를 저장할때 A,B배열 나눠서 저장
	int i = 0; //카운트를 셀 변수
	int size; //파일로부터 크기를 입력받아 파일마다 다른 데이터 크기 지정 가능


	printf("파일 이름 ? ");
	scanf("%s", buffer);//파일이름 입력받음

	if (strcmp(buffer, "data.txt")) //파일이름이 data.txt가 아닐시
	{
		printf("파일이름이 data.txt가 아닙니다. 다시 실행해주세요\n");
		exit(1); //종료
	}

	FILE* fp = fopen(buffer, "r"); //입력 스트림 열기

	fscanf(fp, "%d", &size); //데이터 크기 스캔

	while (!feof(fp)) //파일의 끝까지
	{
		if (i < size) //i는 배열의 index역할, 0~(size-1)만큼 배열에 저장
		{
			fscanf(fp, "%d %d ", &buf1, &buf2); //buf1=x,buf2=y

			if (flag == ATURN) { //A좌표 저장
				A[i].x = buf1;
				A[i].y = buf2;
			}
			else if (flag == BTURN) { //B좌표 저장
				B[i].x = buf1;
				B[i].y = buf2;
			}
			i++;

		}
		else if (i == size) //A배열 다 저장하면
		{
			fscanf(fp, "%d", &size); //사이즈 저장

			if (flag == ATURN) //A차례면
				flag = BTURN; //B로 바꿈
			else {
				flag = ATURN;

			}

			i = 0;//index를 다시 0으로 하여 데이터를 B배열에 0부터 저장
		}
	}

	fclose(fp); //입력 파일 스트림 닫기

	return size;//점들의 갯수를 반환
}

int SimpleAlgorithm(struct Point* A, struct Point* B, int size) //배열 전체를 단순 1:1 비교하는 함수
{
	int i, j; //index
	int xleng, yleng, xyleng, min; //xleng=은 A-B사이 x거리, yleng은 A-B사이 y거리, xyleng은 전체거리,min은 최단거리

	xleng = abs(B[0].x - A[0].x); //B.x-A.x
	yleng = abs(B[0].y - A[0].y); //B.y-A.y
	xyleng = xleng + yleng; //전체거리
	min = xyleng; //가장 가까운 두점사이 거리

	for (i = 0; i < size; i++)
		for (j = 0; j < size; j++) //전체를 차례로
		{
			xleng = abs(B[j].x - A[i].x);
			yleng = abs(B[j].y - A[i].y);
			xyleng = xleng + yleng; //점들의 거리
			if (xyleng < min) //가장가까운 두점보다 거리가 적으면
			{
				min = xyleng; //그 두점이 가장 가까운 두점
				As = &A[i]; //A배열 가리킴
				Bs = &B[j]; //B배열 가리킴
			}
		}
	return min; //가장가까운 두점 거리 반환
}

int SmartAlgoritm(struct Point* A, struct Point* B, int size) //정렬후 x좌표기준 가장가까운 순대로 제곱근만큼만 비교하는 함수
{
	int i, j; //index
	int xleng, yleng, xyleng;
	int min;
	double dsize = (double)size; //제곱근을 구하기위해 double형 자료 저장
	dsize = sqrt(dsize); //제곱근

	QuickSort(A, 0, (size - 1)); //x좌표를 기준으로 A,B배열 각각 오름차순으로 정렬
	QuickSort(B, 0, (size - 1)); //quicksort알고리즘을 이용해 정렬 시간을 줄임

	xleng = abs(B[0].x - A[size-1].x);
	yleng = abs(B[0].y - A[size-1].y);
	xyleng = xleng + yleng;
	min = xyleng; //가장 가까운 두점 거리 초기화


	for(i=0;i <= (int)dsize; i++)
		for (j = 0; j <= (int)dsize; j++) //점들의갯수의 제곱근 만큼만
		{
			xleng = abs(B[j].x - A[size-(i+1)].x); //A는 최대->최소, B는 최소->최대 방향으로
			yleng = abs(B[j].y - A[size-(i+1)].y); //처음부터 점 갯수의 제곱근 만큼만 비교
			xyleng = xleng + yleng;

			if (min > xyleng) //가장가까운 두점의 거리보다 적으면 
			{
				min = xyleng; //이제부터 가장 가까운 두점
				As = &A[size - (i+1)];
				Bs = &B[j];
			}
		}
	return min; //최소 거리 반환
}

void Print_Algo(int min, double duration) //결과를 출력하는 함수
{
	printf("최단 거리 = %d, ", min);
	printf("i = (%d, %d), p = (%d, %d)\n", As->x, As->y, Bs->x, Bs->y); //i는 A점, p는 B점
	printf("실행 시간: %.2f 초\n", duration); //실행시간 출력
}

void QuickSort(struct Point* p, int start, int end) //빠르게 오름차순으로 정렬하는 quicksort
{
	if (start >= end) {
		// 원소가 1개인 경우
		return;
	}

	int pivot = start;
	int i = pivot + 1; // 왼쪽 출발 지점 
	int j = end; // 오른쪽 출발 지점
	int temp;

	while (i <= j) {
		// 포인터가 엇갈릴때까지 반복
		while (i <= end && p[i].x <= p[pivot].x) {
			i++;
		}
		while (j > start && p[j].x >= p[pivot].x) {
			j--;
		}

		if (i > j) {
			// 엇갈릴 경우
			temp = p[j].x;
			p[j].x = p[pivot].x;
			p[pivot].x = temp; //x좌표 스왑

			temp = p[j].y;
			p[j].y = p[pivot].y;
			p[pivot].y = temp; //y좌표 스왑
		}
		else {
			// i번째와 j번째를 스왑
			temp = p[i].x;
			p[i].x = p[j].x;
			p[j].x = temp; //x좌표 스왑

			temp = p[i].y;
			p[i].y = p[j].y;
			p[j].y = temp; //y좌표 스왑
		}
	}

	//재귀적으로 함수호출
	QuickSort(p, start, j - 1);
	QuickSort(p, j + 1, end);
}