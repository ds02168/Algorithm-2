#include <stdio.h>
#include <stdlib.h>

#define INIT_SIZE 10
#define COMPARE(x,y) (((x)<(y)) ? -1 : ((x)==(y)) ? 0 : 1)
struct poly {
	int exp;
	int coef;
};

struct poly *input_poly();
void print_poly(struct poly*); //기본구현

struct poly *padd(struct poly*, struct poly*); //덧셈

struct poly *single_multi(struct poly*, struct poly); //단항 곱

//struct poly *pmulti(struct poly*, struct poly*);

void main(void)
{
	struct poly *A, *B, *C, *D;

	A = input_poly();
	B = input_poly();

	printf("다항식 A: ");
	print_poly(A);

	printf("다항식 B: ");
	print_poly(B);

	C = padd(A, B);
	printf("A + B: ");
	print_poly(C);

	for (int i = 0; A[i].exp != -1; i++) {
		D = single_multi(B, A[i]);
		printf("\n%d번째 곱 = ", i);
		print_poly(D);
	}

	free(A);
	free(B);
	free(C);
	free(D);
}

struct poly *input_poly()
{
	int size = INIT_SIZE, i;
	struct poly *p;

	p = (struct poly*)malloc(sizeof(struct poly)*size);
	printf("다항식(계수, 지수)쌍 입력 (마지막항은 -1 -1): \n");
	for (i = 0;; i++)
	{
		scanf("%d %d", &p[i].coef, &p[i].exp);
		if (p[i].coef == -1 && p[i].exp == -1)
			break;
		if (i == size - 1)
		{
			size = size * 2;
			p = (struct poly*)realloc(p, sizeof(struct poly)*size);
		}
	}
	return p;

}


void print_poly(struct poly* p)
{
	printf("{ ");
	for (int i = 0; p[i].exp != -1; i++)
	{
		printf("(%d, %d)", p[i].coef, p[i].exp);
	}
	printf(" }\n");
}

struct poly *padd(struct poly*A, struct poly*B)
{
	int ia, ib, ic, size = INIT_SIZE, coef;
	struct poly* C;
	C = (struct poly*)malloc(sizeof(struct poly)*size);
	ia = ib = ic = 0;

	while ((A[ia].exp != -1) && (B[ib].exp != -1))
	{
		switch (COMPARE(A[ia].exp, B[ib].exp))
		{
		case -1:
			C[ic++] = B[ib++];
			break;
		case 0:
			coef = A[ia].coef + B[ib].coef;
			if (coef) {
				C[ic].coef = coef;
				C[ic].exp = A[ia].exp;
			}
			ia++;
			ib++;
			ic++;
			break;
		case 1:
			C[ic++] = A[ia++];
			break;
		}
		if (ic == size)
		{
			size = size * 2;
			C = (struct poly*)realloc(C, sizeof(struct poly)*size);
		}
	}

	while (A[ia].exp != -1)
	{
		if (ic == size)
		{
			size = size * 2;
			C = (struct poly*)realloc(C, sizeof(struct poly)*size);
		}
		C[ic++] = A[ia++];

	}

	while (B[ib].exp != -1)
	{
		if (ic == size)
		{
			size = size * 2;
			C = (struct poly*)realloc(C, sizeof(struct poly)*size);
		}

		C[ic++] = B[ib++];
	}

	C[ic].exp = -1;
	C[ic].coef = -1;

	return C;
}


struct poly *single_multi(struct poly *B, struct poly item)
{
	struct poly *p;
	int size, i;
	for (i = 0; B[i].exp != -1; i++);
	size = i + 1;

	p = (struct poly*)malloc(sizeof(struct poly)*size);
	for (i = 0; i<size -1; i++) {
		p[i].coef = B[i].coef * item.coef;
		p[i].exp = B[i].exp *item.exp;
	}
	p[size - 1].exp = -1;
	p[size - 1].coef = -1;
	return p;
}
