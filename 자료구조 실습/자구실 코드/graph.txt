#include <stdio.h>
#include <stdlib.h>

struct node {
	int data;
	struct node* next;
};

void make_graph();
void print_graph();
void print_list(struct node *);
int max_degree();
void dfs(int);
void bfs(int);
void dfs_ST(int);
void connected();

int n, *visited;
struct node** graph;

void main()
{
	make_graph();
	print_graph();
	/*
	printf("[ ");
	print_list(graph[max_degree()]);
	printf("]\n");
	*/
	for (int i = 0; i < n; i++)
		visited[i] = 0;
	printf("DFS: [ ");
	dfs(0);
	printf("]\n");

	for (int i = 0; i < n; i++)
		visited[i] = 0;
	printf("BFS: [ ");
	bfs(0);
	printf("]\n");

	for (int i = 0; i < n; i++)
		visited[i] = 0;
	printf("DFS Spanning Tree: [ ");
	dfs_ST(0);
	printf("]\n");

	for (int i = 0; i < n; i++)
		visited[i] = 0;
	connected();
}

void make_graph()
{
	int v1, v2;
	FILE* fp;
	struct node* ptr;

	fp = fopen("data.txt", "r");
	fscanf(fp, "%d", &n);
	graph = (struct node**)calloc(n, sizeof(struct node*));
	visited = (int*)malloc(sizeof(int) * n);

	while (1) {
		fscanf(fp, "%d%d", &v1, &v2);
		if (v1 == -1 || v2 == -1)
			break;

		ptr = (struct node*)malloc(sizeof(struct node));
		ptr->data = v2;
		ptr->next = graph[v1];
		graph[v1] = ptr;

		ptr = (struct node*)malloc(sizeof(struct node));
		ptr->data = v1;
		ptr->next = graph[v2];
		graph[v2] = ptr;
	}
}

void print_graph()
{
	for (int i = 0; i < n; i++) {
		printf("(%d) -> [ ", i);
		print_list(graph[i]);
		printf("]\n");
	}
}

void print_list(struct node* start)
{
	for (struct node* ptr = start; ptr != NULL; ptr = ptr->next)
		printf("%d ", ptr->data);
}

int max_degree()
{
	int degree = -1, vertex = -1, counter;

	for (int i = 0; i < n; i++) {
		counter = 0;
		for (struct node* ptr = graph[i]; ptr != NULL; ptr = ptr->next)
			counter++;
		if (counter > degree) {
			degree = counter;
			vertex = i;
		}
	}
	return vertex;
}

void dfs(int v)
{
	printf("%d ", v);
	visited[v] = 1;

	for (struct node* ptr = graph[v]; ptr != NULL; ptr = ptr->next) {
		if (visited[ptr->data] == 0)
			dfs(ptr->data);
	}
}

void bfs(int v)
{
	int* queue, front, rear;

	queue = (int*)malloc(sizeof(int) * n);
	visited[0] = 1;
	queue[0] = v;
	front = -1;
	rear = 0;
	
	while (front != rear) {
		v = queue[++front];
		printf("%d ", v);
		for (struct node* ptr = graph[v]; ptr != NULL; ptr = ptr->next) {
			if (visited[ptr->data] == 0) {
				queue[++rear] = ptr->data;
				visited[ptr->data] = 1;
			}
		}
	}
}

void dfs_ST(int v)
{
	visited[v] = 1;

	for (struct node* ptr = graph[v]; ptr != NULL; ptr = ptr->next) {
		if (visited[ptr->data] == 0) {
			printf("(%d, %d) ", v, ptr->data);
			dfs_ST(ptr->data);
		}
	}
}

void connected()
{
	int counter = 1;

	for (int i = 0; i < n; i++) {
		if (visited[i] == 0) {
			printf("Connectd Component %d: [ ", counter++);
			dfs(i);
			printf("]\n");
		}
	}
}