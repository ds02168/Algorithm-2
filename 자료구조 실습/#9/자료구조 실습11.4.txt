#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct node {
	struct node* lchild;
	int data;
	struct node* rchild;
};

struct node* make_tree_by_code();
void inorder(struct node*);
void preorder(struct node*);
void postorder(struct node*);
struct node* copy(struct node*);
struct node* swap(struct node*);
bool equal(struct node*, struct node*);
struct node* make_tree_by_random(int);
int height(struct node *);			//tree의 깊이
int	node_num(struct node *);		//노드 수
int leaf_node_num(struct node *);	//리프 노드의 수


void main()
{
	struct node *tree1, *tree2, *tree3, *tree4;
	int num;


	srand(time(0));

	printf("노드의 수 입력: ");
	scanf("%d", &num);
	
	tree4 = make_tree_by_random(num);

	/*
	tree1 = make_tree_by_code();
	tree2 = copy(tree1);
	tree3 = swap(tree1);

	printf("두 트리가 같은가? %s\n", equal(tree1, tree3) ? "true" : "false");
	*/
	printf("inorder = [ ");
	inorder(tree4);
	printf("]\n");

	printf("preorder = [ ");
	preorder(tree4);
	printf("]\n");
	
	printf("postorder = [ ");
	postorder(tree4);
	printf("]\n"); 
	
	printf("트리의 기이 = %d\n", height(tree4));
	printf("트리에 있는 노드 수 = %d\n", node_num(tree4));
	printf("리프 노드의 수 = %d\n", leaf_node_num(tree4));

}
struct node* make_tree_by_code()
{
	struct node* five;
	five = (struct node*)malloc(sizeof(struct node));
	five->data = 5;

	struct node* three;
	three = (struct node*)malloc(sizeof(struct node));
	three->data = 3;

	struct node* eight;
	eight = (struct node*)malloc(sizeof(struct node));
	eight->data = 8;

	struct node* one;
	one = (struct node*)malloc(sizeof(struct node));
	one->data = 1;

	struct node* four;
	four = (struct node*)malloc(sizeof(struct node));
	four->data = 4;

	one->lchild = one->rchild = NULL;
	four->lchild = four->rchild = NULL;
	three->lchild = one;
	three->rchild = four;
	eight->lchild = eight->rchild = NULL;
	five->lchild = three;
	five->rchild = eight;

	return five;
}

void inorder(struct node* ptr)
{
	if (ptr != NULL)
	{
		inorder(ptr->lchild);
		printf("%d ", ptr->data);
		inorder(ptr->rchild);
	}
}

void preorder(struct node* ptr)
{
	if (ptr != NULL)
	{
		printf("%d ", ptr->data);
		preorder(ptr->lchild);
		preorder(ptr->rchild);
	}
}

void postorder(struct node* ptr)
{
	if (ptr != NULL)
	{
		postorder(ptr->lchild);
		postorder(ptr->rchild);
		printf("%d ", ptr->data);
	}
}

struct node* copy(struct node* original)
{
	struct node* new_node;

	if (original == NULL)
		return NULL;

	new_node = (struct node*)malloc(sizeof(struct node));
	new_node->data = original->data;
	new_node->lchild = copy(original->lchild);
	new_node->rchild = copy(original->rchild);

	return new_node;
}

bool equal(struct node* tree1, struct node *tree2)
{
	return ((!tree1 && !tree2) || (tree1&&tree2&&
		(tree1->data == tree2->data) &&
		equal(tree1->lchild, tree2->lchild) &&
		equal(tree1->rchild, tree2->rchild)));
}

struct node* swap(struct node* original)
{
	struct node* new_node;

	if (original == NULL)
		return NULL;

	new_node = (struct node*)malloc(sizeof(struct node));
	new_node->data = original->data;
	new_node->lchild = swap(original->rchild);
	new_node->rchild = swap(original->lchild);

	return new_node;
}

struct node* make_tree_by_random(int n)
{
	struct node * root, *parent;

	if (n <= 0)
		return NULL;

	root = (struct node*)malloc(sizeof(struct node));
	root->data = 1;
	root->lchild = root->rchild = NULL;


	for (int i = 2; i <= n; i++)
	{
		parent = root;
		while (1)
		{
			if (rand() % 2 == 0)	//left
			{
				if (parent->lchild != NULL)
					parent = parent->lchild;
				else
				{
					parent->lchild = (struct node*)malloc(sizeof(struct node));
					parent->lchild->data = i;
					parent->lchild->lchild = parent->lchild->rchild = NULL;
					break;
				}
			}
			else //right
			{
				if (parent->rchild != NULL)
					parent = parent->rchild;
				else
				{
					parent->rchild = (struct node*)malloc(sizeof(struct node));
					parent->rchild->data = i;
					parent->rchild->lchild = parent->rchild->rchild = NULL;
					break;
				}
			}
		}
	}

	return root;
}
